name: Deploy CrewAI Research Application

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install uv
      uses: astral-sh/setup-uv@v4
    
    - name: Install Python dependencies
      run: uv sync
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/synapse-research/package-lock.json
    
    - name: Install frontend dependencies
      run: |
        cd frontend/synapse-research
        npm ci
    
    - name: Build frontend
      run: |
        cd frontend/synapse-research
        npm run build
    
    - name: Test API imports
      run: |
        # Test that the API can be imported without errors
        uv run python -c "
        try:
            from src.crewai_flow_workshop1.api_server import app
            from src.crewai_flow_workshop1.main import DeepResearchFlow
            print('‚úÖ API imports successful')
        except Exception as e:
            print(f'‚ùå Import error: {e}')
            exit(1)
        "

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: Deploy to staging
      run: |
        echo "üöÄ Deploying to staging environment..."
        echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
        echo "Add your deployment commands here (e.g., deploy to cloud provider)"
        
    - name: Health check
      run: |
        echo "üîç Running health checks..."
        echo "Add health check commands for your staging environment"

  deploy-production:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Deploy to production
      run: |
        echo "üåü Deploying to production environment..."
        echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
        echo "Add your production deployment commands here"
        
    - name: Health check
      run: |
        echo "‚úÖ Running production health checks..."
        echo "Add health check commands for your production environment"

    - name: Notify deployment
      run: |
        echo "üéâ CrewAI Research Application deployed successfully!"
        echo "Frontend: Available on port 3000"
        echo "Backend API: Available on port 8000"
        echo "Health endpoint: /health"